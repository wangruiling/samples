package org.wrl.spring.orm.dao.jpa;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.wrl.spring.orm.UserModel;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import java.sql.SQLException;

/**
 * Created with IntelliJ IDEA.
 *
 * @author: wangrl
 * @Date: 2015-11-16 15:13
 */
public class UserJpaDaoImplTest {
    private static EntityManagerFactory entityManagerFactory;

    @BeforeClass
    public static void setUpClass() {
        String[] configLocations = new String[] {"applicationContext-jpa.xml"};
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configLocations);
        entityManagerFactory = ctx.getBean(EntityManagerFactory.class);
    }

    @Before
    public void setUp() throws SQLException {
        //id自增主键从0开始
        String createTableSql = "create memory table test(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(100))";
        executeSql(createTableSql);
    }
    @After
    public void tearDown() throws SQLException {
        String dropTableSql = "drop table test";
        executeSql(dropTableSql);
    }

    private void executeSql(String sql) throws SQLException {
        EntityManager em = entityManagerFactory.createEntityManager();
        beginTransaction(em);
        em.createNativeQuery(sql).executeUpdate();
        commitTransaction(em);
        closeEntityManager(em);
    }

    @Test
    public void testFirst() throws SQLException {
        UserModel model = new UserModel();
        model.setMyName("test");
        EntityManager em = null;
        try {
            em = entityManagerFactory.createEntityManager();
            beginTransaction(em);
            em.persist(model);
            commitTransaction(em);
        } catch (RuntimeException e) {
            rollbackTransacrion(em);
            throw e;
        }
        finally {
            closeEntityManager(em);
        }
    }

    private void closeEntityManager(EntityManager em) {
        em.close();
    }

    private void rollbackTransacrion(EntityManager em) throws SQLException {
        if(em != null) {
            em.getTransaction().rollback();
        }
    }

    private void commitTransaction(EntityManager em) throws SQLException {
        em.getTransaction().commit();
    }

    private void beginTransaction(EntityManager em) throws SQLException {
        em.getTransaction().begin();
    }

    @Test
    public void testSave() throws Exception {

    }

    @Test
    public void testCountAll() throws Exception {

    }

    @Test
    public void testDelete() throws Exception {

    }
}