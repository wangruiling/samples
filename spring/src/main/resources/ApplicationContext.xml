<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

       <bean id="hello" name="hello12,jkk" class="org.wrl.spring.spring3.HelloImpl"/>
       <bean class="org.wrl.spring.spring3.HelloImpl">
              <property name="values">
                     <list>
                            <value>1</value>
                            <value>2</value>
                            <value>3</value>
                     </list>
              </property>
              <property name="array">
                     <array>
                            <value>2</value>
                     </array>
              </property>
       </bean>

       <!-- ############## Resource相关 start ############# -->
       <bean class="org.wrl.spring.source.ResourceBean"/>


       <bean id="resourceBean1" class="org.wrl.spring.source.StringToResource">
              <property name="resource" value="org/wrl/spring/source/test1.properties"/>
       </bean>
       <bean id="resourceBean2" class="org.wrl.spring.source.StringToResource">
              <property name="resource" value="classpath*:org/wrl/spring/source/test1.properties"/>
       </bean>


       <bean id="injectBean" class="org.wrl.spring.source.ResourceInjectBean">
              <property name="resource" value="org/wrl/spring/source/test1.properties"/>
       </bean>
       <bean id="injectBean2" class="org.wrl.spring.source.ResourceInjectBean">
              <property name="resource" value="classpath:org/wrl/spring/source/test1.properties"/>
       </bean>



       <bean id="resourceArrayBean" class="org.wrl.spring.source.ResourceArrayBean">
              <property name="resources">
                     <array>
                            <value>org/wrl/spring/source/test1.properties</value>
                            <value>LICENSE.txt</value>
                     </array>
              </property>
       </bean>
       <bean id="resourceArrayBean2" class="org.wrl.spring.source.ResourceArrayBean">
              <property name="resources" value="classpath*:META-INF/INDEX.LIST"/>
       </bean>
       <bean id="resourceArrayBean3" class="org.wrl.spring.source.ResourceArrayBean">
              <property name="resources">
                     <array>
                            <value>org/wrl/spring/source/test1.properties</value>
                            <value>classpath*:META-INF/INDEX.LIST</value>
                     </array>
              </property>
       </bean>
       <!-- ############## Resource相关 end ############# -->

       <!-- ############## 在 Bean 定义中使用 EL(xml 风格的配置) start ############# -->
       <!--SpEL 支持在 Bean 定义时注入，默认使用“#{SpEL 表达式}”表示，其中“#root”根对象默认可以认为是 ApplicationContext，只有 ApplicationContext 实现默认支持 SpEL，获取根对象属性其实是获取容器中的 Bean-->
       <!--模板默认以前缀“#{”开头，以后缀“}”结尾，且不允许嵌套，如“#{'Hello'#{world}}”错误，如“#{'Hello' + world}”中“world”默认解析为 Bean。当然可以使用“@bean”引用了。-->
       <bean id="world" class="java.lang.String">
              <constructor-arg value="#{' World!'}"/>
       </bean>
       <bean id="hello1" class="java.lang.String">
              <constructor-arg value="#{'Hello'}#{world}"/>
       </bean>
       <bean id="hello2" class="java.lang.String">
              <constructor-arg value="#{'Hello' + world}"/>
              <!-- 不支持嵌套的 -->
              <!--<constructor-arg value="#{'Hello'#{world}}"/>-->
       </bean>
       <bean id="hello3" class="java.lang.String">
              <constructor-arg value="#{'Hello' + @world}"/>
       </bean>
       <!-- ############## 在 Bean 定义中使用 EL end ############# -->
</beans>